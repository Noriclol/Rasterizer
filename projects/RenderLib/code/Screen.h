#pragma once
#include <GL/glew.h>

#include "Renderer.h"
#include "Resource_Mesh.h"
#include "Resource_Shader.h"

class GraphicsNode;
/**
 * \Node Container containing the texture generated by renderer aswell as the quad we render on the screen
 */
class Screen
{
public:
	Renderer renderer;
	//ShaderResource screen_shader;


	GLuint program;
	GLuint vertexShader;
	GLuint pixelShader;
	GLuint quad;

	GLfloat quadData[28] =
	{
		-1,	-1,	-1,			// pos 0
		1,	0,	0,	1,	// color 0
		-1,	1,	-1,			// pos 1
		0,	1,	0,	1,	// color 0
		1,	-1,	-1,			// pos 2
		0,	0,	1,	1,	// color 0
		1,	1,	-1,			// pos 2
		0,	0,	1,	1	// color 0
	};


	//TextureResource screen_texture;

	const GLchar* vs =
		"#version 430\n"
		"layout(location=0) in vec3 pos;\n"
		"layout(location=1) in vec4 color;\n"
		"layout(location=0) out vec4 Color;\n"
		"void main()\n"
		"{\n"
		"	gl_Position = vec4(pos, 1);\n"
		"	Color = color;\n"
		"}\n";

	const GLchar* ps =
		"#version 430\n"
		"layout(location=0) in vec4 color;\n"
		"out vec4 Color;\n"
		"void main()\n"
		"{\n"
		"	Color = color;\n"
		"}\n";


	Screen()
	{
		//screen_shader = ShaderResource(ps, vs);

		// setup vertex shader
		this->vertexShader = glCreateShader(GL_VERTEX_SHADER);
		GLint length = static_cast<GLint>(std::strlen(vs));
		glShaderSource(this->vertexShader, 1, &vs, &length);
		glCompileShader(this->vertexShader);

		// get error log
		GLint shaderLogSize;
		glGetShaderiv(this->vertexShader, GL_INFO_LOG_LENGTH, &shaderLogSize);
		if (shaderLogSize > 0)
		{
			GLchar* buf = new GLchar[shaderLogSize];
			glGetShaderInfoLog(this->vertexShader, shaderLogSize, NULL, buf);
			printf("[SHADER COMPILE ERROR]: %s", buf);
			delete[] buf;
		}

		// setup pixel shader
		this->pixelShader = glCreateShader(GL_FRAGMENT_SHADER);
		length = static_cast<GLint>(std::strlen(ps));
		glShaderSource(this->pixelShader, 1, &ps, &length);
		glCompileShader(this->pixelShader);

		// get error log
		shaderLogSize;
		glGetShaderiv(this->pixelShader, GL_INFO_LOG_LENGTH, &shaderLogSize);
		if (shaderLogSize > 0)
		{
			GLchar* buf = new GLchar[shaderLogSize];
			glGetShaderInfoLog(this->pixelShader, shaderLogSize, NULL, buf);
			printf("[SHADER COMPILE ERROR]: %s", buf);
			delete[] buf;
		}

		// create a program object
		this->program = glCreateProgram();
		glAttachShader(this->program, this->vertexShader);
		glAttachShader(this->program, this->pixelShader);
		glLinkProgram(this->program);
		glGetProgramiv(this->program, GL_INFO_LOG_LENGTH, &shaderLogSize);
		if (shaderLogSize > 0)
		{
			GLchar* buf = new GLchar[shaderLogSize];
			glGetProgramInfoLog(this->program, shaderLogSize, NULL, buf);
			printf("[PROGRAM LINK ERROR]: %s", buf);
			delete[] buf;
		}

		// setup quad
		glGenBuffers(1, &this->quad);
		glBindBuffer(GL_ARRAY_BUFFER, this->quad);
		glBufferData(GL_ARRAY_BUFFER, sizeof(quadData), quadData, GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}


	void Draw(Matrix4& view, Matrix4& projection)
	{
		glUseProgram(this->program);

		// do stuff
		glBindBuffer(GL_ARRAY_BUFFER, this->quad);
		glEnableVertexAttribArray(0);
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(GLfloat) * 7, NULL);
		glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, sizeof(GLfloat) * 7, (GLvoid*)(sizeof(GLfloat) * 3));
		glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);


		//unbind
		glBindBuffer(GL_ARRAY_BUFFER, 0);
		glDisableVertexAttribArray(0);
		glDisableVertexAttribArray(1);

		glUseProgram(0);
	}

	void AddRenderableObject(GraphicsNode* obj)
	{
		//renderer = 
	}


};











//class Screen
//{
//public:
//
//
//	//fields
//	std::vector<Vector3> verticies;
//	std::vector<Vector3> normals;
//	std::vector<Vector3> UVs;
//	std::vector<float> vBuffer;		   //VertexBuffer
//	std::vector<unsigned int> iBuffer; //IndexBuffer
//	unsigned int stride;
//
//	unsigned int iIBufferHandle;
//	unsigned int iVBufferHandle;
//
//	//functions
//
//	//	-Buffers
//	void GenerateBuffer();
//	void BindBuffer();
//	void BindVertexAttribute();
//	void BindTexture();
//	void UnbindTexture();
//	void UnbindBuffers();
//	void DeleteBuffers();
//
//	//	-Drawing
//	void DrawCall();
//	void DrawTexture();
//	Screen();
//};
//
