#pragma once
#include <GL/glew.h>

#include "Renderer.h"
#include "Resource_Mesh.h"
#include "Resource_Shader.h"

class GraphicsNode;
/**
 * \Node Container containing the texture generated by renderer aswell as the quad we render on the screen
 */
class Screen
{
public:
	unsigned int id;
	Renderer renderer;

	ShaderResource screen_shader;
	TextureResource screen_texture;

	const GLchar* vs =
		"#version 430\n"
		"layout(location=0) in vec3 pos;\n"
		"layout(location=1) in vec4 color;\n"
		"layout(location=0) out vec4 Color;\n"
		"void main()\n"
		"{\n"
		"	gl_Position = vec4(pos, 1);\n"
		"	Color = color;\n"
		"}\n";

	const GLchar* ps =
		"#version 430\n"
		"layout(location=0) in vec4 color;\n"
		"out vec4 Color;\n"
		"void main()\n"
		"{\n"
		"	Color = color;\n"
		"}\n";

	GLuint quad;

	GLfloat quadData[28] =
	{
		-1,	-1,	-1,			// pos 0
		1,	0,	0,	1,	// color 0
		-1,	1,	-1,			// pos 1
		0,	1,	0,	1,	// color 0
		1,	-1,	-1,			// pos 2
		0,	0,	1,	1,	// color 0
		1,	1,	-1,			// pos 2
		0,	0,	1,	1	// color 0
	};



	explicit Screen(const Renderer& renderer) : screen_shader(ps, vs)
	{
		screen_texture = TextureResource(0);

		// setup quad
		glGenBuffers(1, &this->quad);
		glBindBuffer(GL_ARRAY_BUFFER, this->quad);
		glBufferData(GL_ARRAY_BUFFER, sizeof(quadData), quadData, GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

	}

	void Draw(Matrix4& view, Matrix4& projection)
	{

		//bind
		screen_shader.Bind();
		glBindBuffer(GL_ARRAY_BUFFER, this->quad);

		//Vertex attribs
		glEnableVertexAttribArray(0);
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float32) * 7, NULL);
		glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, sizeof(float32) * 7, (GLvoid*)(sizeof(float32) * 3));

		//Drawcall
		glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

		//unbind
		glBindBuffer(GL_ARRAY_BUFFER, 0);
		screen_shader.Unbind();
	}

	void AddRenderableObject(GraphicsNode* obj)
	{
		//renderer = 
	}


};











//class Screen
//{
//public:
//
//
//	//fields
//	std::vector<Vector3> verticies;
//	std::vector<Vector3> normals;
//	std::vector<Vector3> UVs;
//	std::vector<float> vBuffer;		   //VertexBuffer
//	std::vector<unsigned int> iBuffer; //IndexBuffer
//	unsigned int stride;
//
//	unsigned int iIBufferHandle;
//	unsigned int iVBufferHandle;
//
//	//functions
//
//	//	-Buffers
//	void GenerateBuffer();
//	void BindBuffer();
//	void BindVertexAttribute();
//	void BindTexture();
//	void UnbindTexture();
//	void UnbindBuffers();
//	void DeleteBuffers();
//
//	//	-Drawing
//	void DrawCall();
//	void DrawTexture();
//	Screen();
//};
//
